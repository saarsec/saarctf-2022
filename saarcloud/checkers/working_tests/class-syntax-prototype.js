// Copyright 2015 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



var RESULT=[];function addExceptionExpr(expr){try{RESULT.push(JSON.stringify(eval(expr)))}catch(e){RESULT.push(e.toString())}}function addReportExprJson(expr){RESULT.push(JSON.stringify(eval(expr)))}function addReportExpr(expr){RESULT.push(JSON.parse(JSON.stringify(eval(expr))))}function descriptor(object,propertyName){return Object.getOwnPropertyDescriptor(object,propertyName)}function enumeratedProperties(object){var properties=[];for(var propertyName in object)properties.push(propertyName);return properties}Array.prototype.includes=function(element){return-1!==this.indexOf(element)};addReportExpr('class A {}; descriptor(A, "prototype").writable');addReportExprJson("class A {}; var x = A.prototype; A.prototype = 3; A.prototype","x");addReportExpr('class A {}; descriptor(A, "prototype").enumerable');addReportExpr('class A {}; A.foo = "foo"; enumeratedProperties(A).includes("foo")');addReportExpr('class A {}; enumeratedProperties(A).includes("prototype")');addReportExpr('class A {}; descriptor(A, "prototype").configurable');addExceptionExpr('class A {}; Object.defineProperty(A, "prototype", {value: "foo"})','"TypeError: Cannot redefine property: prototype"');addReportExpr('class A { static foo() {} }; descriptor(A, "foo").writable');addReportExprJson("class A { static foo() {} }; A.foo = 3; A.foo","3");addReportExpr('class A { static foo() {} }; descriptor(A, "foo").enumerable');addReportExpr('class A { static foo() {} }; enumeratedProperties(A).includes("foo")');addReportExpr('class A { static foo() {} }; descriptor(A, "foo").configurable');addReportExprJson('class A { static foo() {} }; Object.defineProperty(A, "foo", {value: "bar"}); A.foo','"bar"');addReportExprJson('class A { static get foo() {} }; descriptor(A, "foo").writable',"undefined");addReportExprJson("class A { static get foo() { return 5; } }; A.foo = 3; A.foo","5");addReportExpr('class A { static get foo() {} }; descriptor(A, "foo").enumerable');addReportExpr('class A { static get foo() {} }; enumeratedProperties(A).includes("foo")');addReportExpr('class A { static get foo() {} }; enumeratedProperties(new A).includes("foo")');addReportExpr('class A { static get foo() {} }; descriptor(A, "foo").configurable');addReportExprJson('class A { static get foo() {} }; Object.defineProperty(A, "foo", {value: "bar"}); A.foo','"bar"');addReportExpr('class A { foo() {} }; descriptor(A.prototype, "foo").writable');addReportExprJson("class A { foo() {} }; A.prototype.foo = 3; A.prototype.foo","3");addReportExpr('class A { foo() {} }; descriptor(A.prototype, "foo").enumerable');addReportExpr('class A { foo() {} }; enumeratedProperties(A.prototype).includes("foo")');addReportExpr('class A { foo() {} }; enumeratedProperties(new A).includes("foo")');addReportExpr('class A { foo() {} }; descriptor(A.prototype, "foo").configurable');addReportExprJson('class A { foo() {} }; Object.defineProperty(A.prototype, "foo", {value: "bar"}); A.prototype.foo','"bar"');addReportExprJson('class A { get foo() {} }; descriptor(A.prototype, "foo").writable',"undefined");addReportExprJson("class A { get foo() { return 5; } }; A.prototype.foo = 3; A.prototype.foo","5");addReportExpr('class A { get foo() {} }; descriptor(A.prototype, "foo").enumerable');addReportExpr('class A { get foo() {} }; enumeratedProperties(A.prototype).includes("foo")');addReportExpr('class A { get foo() {} }; enumeratedProperties(new A).includes("foo")');addReportExpr('class A { get foo() {} }; descriptor(A.prototype, "foo").configurable');addReportExprJson('class A { get foo() {} }; Object.defineProperty(A.prototype, "foo", {value: "bar"}); A.prototype.foo','"bar"');addReportExpr('class A { }; descriptor(A.prototype, "constructor").writable');addReportExprJson("class A { }; A.prototype.constructor = 3; A.prototype.constructor","3");addReportExpr("class A { }; x = {}; A.prototype.constructor = function () { return x; }; (new A) instanceof A");addReportExpr('class A { }; descriptor(A.prototype, "constructor").enumerable');addReportExpr('class A { }; enumeratedProperties(A.prototype).includes("constructor")');addReportExpr('class A { }; enumeratedProperties(new A).includes("constructor")');addReportExpr('class A { }; descriptor(A.prototype, "constructor").configurable');addReportExprJson('class A { }; Object.defineProperty(A.prototype, "constructor", {value: "bar"}); A.prototype.constructor','"bar"');var successfullyParsed=true;return RESULT