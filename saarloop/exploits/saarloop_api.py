import json

import requests


class SaarloopAPI:
    def __init__(self, url):
        self.url = url
        self.session = requests.Session()
        self.session.headers["Connection"] = "Close"

    def register(self, username, password):
        r = self.session.post(self.url + '/register', {"username": username, "password": password},
                              timeout=5)
        print(f"Trying to register with {username=} {password=}, got {r.status_code}")
        assert r.status_code == 200

    def login(self, username, password):
        r = self.session.post(self.url + '/login', {"username": username, "password": password},
                              timeout=5)
        print(f"Trying to login with {username=} {password=}, got {r.status_code}")
        assert r.status_code == 200

    def upload_sample(self, sample_name, samplefile):
        r = self.session.post(self.url + '/new_sample', files={"sample_file": (sample_name, samplefile)},
                              timeout=5)
        print(f"Trying to upload sample {sample_name=}, got {r.status_code}")
        assert r.status_code == 200
        samples = self.parse_samples(r)
        assert sample_name in samples
        return samples[sample_name]

    def list_samples(self):
        r = self.session.get(self.url + '/samples', timeout=5)
        assert r.status_code == 200
        return self.parse_samples(r)

    def parse_samples(self, r):
        samples = {}
        for chunk in r.text.split('<source src="')[1:]:
            sample_url, rem = chunk.split('"', maxsplit=1)
            sample_name = rem.split('<p class="card-text">', maxsplit=1)[1].split('</p>', maxsplit=1)[0].strip()
            samples[sample_name] = sample_url
        return samples

    def download_sample(self, sample_name):
        r = self.session.get(self.url + f'/sample/USER/{sample_name}', timeout=5)
        print(f"Trying to download sample {sample_name=}, got {r.status_code}")
        assert r.status_code == 200
        assert r.content.startswith(b'RIFF')
        return r.content

    def create_synth(self, synth_name, synth):
        r = self.session.post(self.url + '/new_synth', {"synth": json.dumps(synth), "synth_name": synth_name},
                              timeout=5)
        print(f"Trying to create synth {synth_name=}, got {r.status_code}")
        assert r.status_code == 200
        synths = self.parse_synths(r)
        assert synth_name in synths
        return synths[synth_name]

    def list_synths(self):
        r = self.session.get(self.url + '/synths', timeout=5)
        assert r.status_code == 200
        return self.parse_synths(r)

    def parse_synths(self, r):
        synths = {}
        for chunk in r.text.split('<source src="')[1:]:
            synth_url, rem = chunk.split('"', maxsplit=1)
            synth_name = rem.split('<p class="card-text">', maxsplit=1)[1].split('</p>', maxsplit=1)[0].strip()
            synths[synth_name] = synth_url
        return synths

    def download_synth_preview(self, synth_name):
        r = self.session.get(self.url + f'/synth/USER/{synth_name}', timeout=5)
        assert r.status_code == 200
        assert r.content.startswith(b'RIFF')
        return r.content

    def create_loop(self, loop_name, loop):
        r = self.session.post(self.url + '/create_loop', {"loop": json.dumps(loop), "loop_name": loop_name},
                              timeout=5)
        print(f"Trying to create loop {loop_name=}, got {r.status_code}")
        assert r.status_code == 200
        loops = self.parse_loops(r)
        assert loop_name in loops
        loop_id, public = loops[loop_name]
        assert not public
        return loop_id

    def list_loops(self):
        r = self.session.get(self.url + '/loops', timeout=5)
        assert r.status_code == 200
        return self.parse_loops(r)

    def parse_loops(self, r):
        loops = {}
        for chunk in r.text.split('<source src="')[1:]:
            loop_url, rem = chunk.split('"', maxsplit=1)
            loop_id = int(loop_url.rsplit('/', maxsplit=1)[1])
            loop_name = rem.split('<p class="card-text">', maxsplit=1)[1].split('</p>', maxsplit=1)[0].strip()
            is_public = '/publish/' not in rem
            loops[loop_name] = (loop_id, is_public)
        return loops

    def publish_loop(self, loop_id):
        r = self.session.get(self.url + f'/publish/{loop_id}', timeout=5)
        assert r.status_code == 200

    def download_loop(self, loop_id):
        r = self.session.get(self.url + f'/loops/{loop_id}', timeout=5)
        assert r.status_code == 200
        assert r.content.startswith(b'RIFF')
        return r.content
